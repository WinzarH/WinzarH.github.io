---
title: "LikertMaker"
subtitle: "Synthetic Likert scale data with known Mean & StDev"
author: "Hume Winzar"
affiliation: "Macquarie University"
date-format: "DD, MMM, YYYY"
date: "last-modified"
theme: "journal"
format: 
  html:
    page-layout: custom
server: shiny
---

```{r input panel}
#| panel: sidebar 

# Create a new Row in the UI for selectInputs

h4("Scale properties")
sliderInput("item_range", "Item scale range", 5,
  min = 1, max = 11, step = 1
)
# Number of items in the scale
sliderInput("items_n", "Number of items in scale", 5,
  min = 1, max = 20, step = 1
  )
# Sample size 
## (obviously we can set max sample size >300 but it can take while ...)
numericInput("sample_n", "Sample size", 30,
  min = 10, max = 300, step = 1
)

## Input first and second moments
h4("Desired scale moments")
# mean
numericInput("target_mean_scale", "Target mean", 3.75, min = 1, width = "13ch")
# standard deviation
numericInput("target_sd_scale", "Target st dev", 1.25, min = 0, width = "13ch")

actionButton("goButton", "Go!")

p("Click to start simulation")

hr()

downloadLink("downloadData", "Download data")

p("download data as csv file")

hr()

downloadLink("downloadPlot", "Download Histogram")
p("download histogram as .PNG file")

```

::: {.panel-tabset}

## data

```{r output data}
#| panel: center

shinybusy::add_busy_bar(
  color = "#69b3a2",
  centered = TRUE,
  height = "8px"
)

plotOutput("distPlot", height = 100, width = 600)

hr()

h3("Synthetic Data")

DT::dataTableOutput("mystuff")

```

## Histogram

```{r output histogram}

plotOutput("myplotout", width = "90%")

```

## ANZMAC 2022 paper

### Reconstructing Likert-scale data with only reported first and second moments

Hume Winzar

Paper submitted to the ANZMAC conference, Perth, December 2022

#### Abstract:

Most simulations of Likert-scale data are created to test analysis methods before finalising a questionnaire. Here, however, we want to reproduce published results where only the first two moments (mean and variance) are reported. Many publications report only means and standard deviations of rating scales, often only the means. The boundaries of a scale (1-5, 1-7, etc.) will often produce skewed data, so such simple statistics can be misleading. We demonstrate a novel method to synthesise Likert-scale data using only mean and standard deviation so that they can be properly visualised and interpreted. The algorithm is surprisingly accurate compared with known data. 

__Keywords__: Likert Scale, Data Visualisation, Simulation, R, Optimisation


:::

```{r server_function}
#| context: server


### install required packages if needed
requiredPackages <- c("dplyr", "ggplot2", "shinybusy", "DEoptim")
for (package in requiredPackages) { 
  if (!requireNamespaces(package, quietly = TRUE)) {
    install.packages(package, dependencies = TRUE)
  }
}


### load required packages
library(dplyr)      # data manipulation
library(ggplot2)    # data visualisation
library(shinybusy)  # calculation/ progress indicator
library(DEoptim)    # non-linear optimisation

## notional output ----
output$distPlot <- renderPlot({
  xmin <- max(
    1,
    input$target_mean_scale - input$target_sd_scale
  )
  xmax <- min(
    input$target_mean_scale + input$target_sd_scale,
    input$item_range
  )
  mean_point <- data.frame(x = input$target_mean_scale, y = 0.1)
  minor.breaks <- seq(1, input$item_range, 1 / input$items_n)
  boundaries <- c(
    (1 - 1 / input$items_n),
    (input$item_range + 1 / input$items_n)
  )

  ggplot() +
    scale_x_continuous(
      breaks = c(1:input$item_range),
      minor_breaks = minor.breaks,
      limits = boundaries,
      expand = c(0, 0),
      name = "scale value"
    ) +
    geom_segment(aes(
      x = input$target_mean_scale, xend = xmax,
      y = 0.1, yend = 0.1
    ),
    colour = "blue", alpha = 1.0, size = 5
    ) +
    geom_segment(aes(
      x = xmin, xend = input$target_mean_scale,
      y = 0.1, yend = 0.1
    ),
    colour = "blue", alpha = 0.6, size = 5
    ) +
    geom_point(
      data = mean_point, aes(x = x, y = y),
      size = 6, colour = "orange"
    ) +
    labs(
      title = "expected Likert scale",
      subtitle = paste(
        "items=", input$items_n,
        ", mean=", input$target_mean_scale,
        ", sd=", input$target_sd_scale,
        ", n=", input$sample_n
      )
    ) +
    ylab("range") +
    guides(y = "none") +
    theme_classic() +
    theme_bw() +
    theme_minimal() +
    theme(
      panel.background = element_rect(
        fill = "lightblue",
        colour = "lightblue",
        size = 0.5, linetype = "solid"
      ),
      panel.grid.major = element_line(
        size = 0.5, linetype = "solid",
        colour = "white"
      ),
      panel.grid.minor = element_line(
        size = 0.25, linetype = "solid",
        colour = "white"
      )
    ) +
    theme(legend.position = "none")
})
## end notional output --

### Reaction to Go button --
mydata <- eventReactive(input$goButton, {
  ## parameters --
  scale_min <- input$items_n
  scale_max <- input$item_range * input$items_n

  target_mean <- input$target_mean_scale * input$items_n
  target_std <- input$target_sd_scale * input$items_n
  # end parameters --

  ### generate data

  ### Optimisation target ---------
  opt_scale <- function(x) {
    target_stat <- ((target_mean - mean(x)) * 200)^2 +
      ((target_std - sd(x)) * 100)^2
    target_stat
  }

  # optimisation process -------

  lower <- rep(scale_min, each = input$sample_n)
  upper <- rep(scale_max, each = input$sample_n)
  itermax <- input$sample_n * 20


  fnmap_f <- function(x) round(x)
  my_vector <- DEoptim(opt_scale, lower, upper,
    control = DEoptim.control(
      itermax = itermax,
      trace = FALSE,
      parallelType <- 1
    ),
    fnMap = fnmap_f
  )

  mydat1 <- summary(my_vector)
  mydata <- data.frame(scale = mydat1[["optim"]][["bestmem"]])
  mydata <- mydata / input$items_n

  data.structure <- paste0(
    "r", input$item_range,
    "_i", input$items_n,
    "_m", input$target_mean_scale,
    "_sd", input$target_sd_scale
  )

  mydata$structure <- data.structure

  return(mydata)
})

output$mystuff <- DT::renderDataTable(
  DT::datatable(mydata(),
    escape = FALSE,
    options = list(
      pageLength = 10, autoWidth = TRUE,
      columnDefs = list(list(targets = 2, width = "600px")),
      scrollX = TRUE
    )
  )
)


# output$mystuff <- DT::renderDataTable(DT::datatable(mydata()))

output$downloadData <- downloadHandler(
  filename = function() {
    paste0("r", input$item_range,
      "_i", input$items_n,
      "_m", input$target_mean_scale,
      "_sd", input$target_sd_scale,
      ".csv",
      sep = ""
    )
  },
  content = function(file) {
    write.csv(mydata(), file, row.names = FALSE)
  }
)


## Results plot
myplot <- reactive({
  ggplot(data = mydata(), aes(x = scale)) +
    geom_histogram(binwidth = (1 / input$items_n), fill = "#69b3a2", color = "#e9ecef", alpha = 0.9) +
    scale_x_continuous(
      breaks = c(1:input$item_range),
      limits = c((1 - 1 / input$items_n), (input$item_range + 1 / input$items_n)),
      expand = c(0, 0), name = NULL
    ) +
    labs(
      title = "Derived Likert scale distribution",
      subtitle = paste(
        "items=", input$items_n,
        ", mean=", round(mean(mydata()$scale), 2),
        ", sd=", round(sd(mydata()$scale), 2),
        ", median=", round(median(mydata()$scale), 2),
        ", n=", input$sample_n
      ),
      y = NULL,
      x = NULL
    ) +
    guides(y = "none") +
    theme_classic() +
    theme(legend.position = "none", 
          axis.text.x = element_text(size = 15))
})

  output$myplotout <- renderPlot({
    myplot()
  })


output$downloadPlot <- downloadHandler(
  filename = function() {
    paste("r", input$item_range,
      "_i", input$items_n,
      "_m", input$target_mean_scale,
      "_sd", input$target_sd_scale,
      ".png",
      sep = ""
    )
  },
  content = function(file) {
    png(file = file)
    plot(myplot())
    dev.off()
  }
)

```

## Flowchart

```{mermaid}
%%| fig-width: 7
%%| fig-height: 5

flowchart LR
  A[Response points \n 1-5, 1-7, etc] --> D(Scale Properties)
  B[n Items in scale] --> D
  E[Mean] --> G(Target Moments)
  F[St Dev] --> G
  D --> J{Data generator}
  C[Sample size] --> J
  G --> J
  J --> K[Data table]
  J --> L[Histogram]
  
```
